

我对讲者的认识 感受 自己如何成为讲者类似的人

东西大家都放在这里了


东西都在这里 大家可以自己看
我的看法 我要做的就是吸引大家去看 去思考
他讲了什么 哪个地方可以拿来 哪些吸引人的地方

我吸收了什么

可以跟我们的业务有什么结合

小作坊
随意写
生产线

复用、分治

组件化的思考

我们目前的情况

我们的美好未来

模板的地位？

演讲风格的借鉴

React: 组件化，单向数据流
视图层组件体系

演讲的精髓提炼出来



首先是对作者的认识，作者是前端界比较活跃的大牛、标签高产
去年wniter想从中兴挖他去无线，结果他去了苏宁

然后winter挖了勾三股四



他读书涉猎非常广泛、资本社会什么的他都喜欢读，我很好奇他的时间是怎么分配的

翻不到以前的微博了，读书分布表，我曾经还想做一个类似的app



申请去cFF之前我老板问我是“追星”去的嘛
其实是也不是
他们之所以成长为今天所谓的大牛，他们的见地、沉淀、经验、把控能力超群
但是相同年限之后我们未必不会比他们更强


之前曾因为想要和传说中的大牛刘平川一起工作去美团，但是孟老板说



工于自己 雕刻自己 希望大家共勉

 -->
 <!-- 总分总 -->

## 组件化

<small>交互占比较高的页面体系(SPA)</small>

* 狭义的组件化

    - UI层面的标签化

* 广义的组件化

    - 基于数据逻辑层的业务，对不同层级进行不同能力的封装


[slide]
## 组件化优势

<small>提升开发和维护的效率</small>

* 原始的组件，可单独开发测试
* 组件逐级拼装成更复杂的组件，直到整个应用
* 每一级都是易装配，可追踪，可管控的

[slide]
## 组件化目标
<small>复用 vs 分治</small>
* 复用的工程成本很高，内部实现与外部接口都很难取舍，除了最常用了基础控件，其他的不要刻意追求
* 分治带来的是可管理性：组件树中一眼就能看清包含关系，也能够很容易理清数据的传递方向，定位问题
* 一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅

[slide]
## 复用 vs 分治
* 复用的工程成本很高，内部实现与外部接口都很难取舍，除了最常用了基础控件，其他的不要刻意追求
* 分治带来的是可管理性，组件树中一眼就能看清包含关系，也能够很容易理清数据的传递方向，定位问题
* 一切组件化框架，如果要跟其他异构系统作集成，基本上都不可能优雅
